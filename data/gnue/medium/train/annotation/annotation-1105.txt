<section archive="http://mail.gnu.org/pipermail/gnue/2001-December/002880.html" enddate="12 Dec 2001 20:48:25 -0800" posts="10" startdate="11 Dec 2001 10:06:27 -0800" subject="Comments on the HR Draft" title="Human Resources draft proposal">

<topic>Human Resources</topic>
<topic>Application Server</topic>

<p>Derek Neighbors commented on <quote who="Derek Neighbors">section 2.1.7 
Business Object Definitions...</quote>. He wasn't sure how to handle 
re-hires. Mark Smith felt <quote who="Mark Smith">it would be good to make
the re-hire process as streamlined as possible, avoiding rekeying of data
wherever possible.</quote> Derek agreed.</p>

<p>Derek also asked what a 'post' was in this context. Mark explained 
<quote who="Mark Smith">Post equals jobcode/title</quote> but he was open to 
better terminology here. He explained <quote who="Mark Smith">Job data (Job 
Title, Job Hours, Job Minimum Qualifications, etc) can exist independently of 
the employee, as when a job is vacant.</quote> However, smaller organisations 
might not have formal posts - <quote who="Mark Smith">They would prefer just to 
give a person/contract a job title, and leave it at that.</quote> However, allowing 
for both ways of working meant <quote who="Mark Smith">the same data (e.g. job 
title) could be held in two different Classes, the Contract and the Job</quote>.
Derek suggested <quote who="Derek Neighbors">I think the right way to do it woudl 
be to have the person and the job be separate, but in the template for a smaller 
company we make the information for postion/employee all be on one screen so they 
dont 'think' they are putting in different classes.  This way if they grow 
and decide to change their mind they arent redoing data structures, but 
rather just using different forms.</quote></p>

<p>Mark wondered if <quote who="Mark Smith">the best way to get a clear
overview is to draft out the key Classes in the whole package at once,
rather than try a module by module approach</quote> Derek said 
<quote who="Derek Neighbors">I think the current approach is ok.  
We have 'base' classes that are really used if you have things that are spanning 
across multiple packages like person class. I do wonder if we might need package 
bases as well</quote> as the overall GNUe base module.</p> 

<p>Derek had initially suggested that <quote who="Derek Neighbors">Details from 
former employment should include pay information, possibly for several previous 
employers.</quote> Mark explained <quote who="Mark Smith">My understanding is that 
Payroll will definitely want pay info from the last job, especially total tax paid 
this tax year</quote>, but probably not back beyond that. Derek said 
<quote who="Derek Neighbors">At least in the states this is not a 
requirement.</quote></p>

<p>Todd Boyle asked <quote who="Todd Boyle">Will GNUE HR interfaces or 
data model converge with <a href="http://www.hr-xml.org/channels/home.htm">
hr-xml</a> information structures?</quote> Derek said 
<quote who="Derek Neighbors">Just like ebXML and ALL other standards GNUe
can/will conform.</quote> Personally, he thought 
<quote who="Derek Neighbors">datastorage via xml is a bad idea, but we 
already today in (reporter) and later in integrator will have means to 
set a fixed mapping output to virtually anything, including 
XML.</quote></p>

<p>Derek also initially thought <quote who="Derek Neighbors">things like 
relationship/status etc</quote> should be immediately after the class 
that referenced them - <quote who="Derek Neighbors">That or make better 
comments for them. :)</quote>. Neil Tiffin said <quote who="Neil Tiffin">The 
original parser required them first</quote> but he thought this was 
no longer the case. Reinhard M&#252;ller disagreed, saying
<quote who="Reinhard M&#252;ller">Before you can reference something, you 
have to define what it is.</quote> Neil asked about circular references. 
Reinhard said <quote who="Reinhard M&#252;ller">We will be able to do this.
However, I would guess that most of the circular references are merely a 
workaround for missing features in the geas interface</quote>. Derek said 
<quote who="Derek Neighbors">My major point was to avoid confusion, 
regardless of processing order, if we just put in the comments what classes 
used it, perhaps that would be sufficient.</quote> After giving an example, 
he said <quote who="Derek Neighbors">In fact, if we made these type of headers 
'standard', we could then create a doc tool, that built 'docs' off a gcd, 
that had links to what is used by what, etc etc etc...</quote></p>

</section>


