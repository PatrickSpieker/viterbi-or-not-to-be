<section archive="http://www.gnuenterprise.org/irc-logs/gnue-public.log.14Mar2003" author="Arturas Kriukovas" contact="mailto:arturas@gsk.vtu.lt" enddate="14 Mar 2003 04:00:00 -0800" startdate="14 Mar 2003 04:00:00 -0800" subject="[IRC] 14 Mar 2003" title="AppServer API and XMLRPC">

<topic>Application Server</topic>

<p>Jan Ischebeck (siesel) asked Reinhard M&#252;ller (Reinhard) whether 
he had <quote who="Jan Ischebeck">any ideas to change the API to make 
it XMLRPC conform</quote>. Reinhard admitted he didn't know 
<quote who="Reinhard M&#252;ller">what xmlrpc defines and what not, 
what data types xmlrpc knows. If all else fails we could concatenate 
all strings of the table together and define column dividors, row 
dividors and an escape character, and pass it as a single string 
like.</quote> Jan hoped there would be no need to go that far.</p>

<p>After looking at the specs at xmlrpc.org Jan found a structure 
type, <quote who="Jan Ischebeck">that would mean, that we could still 
use our api.</quote> Reinhard raised a question - 
<quote who="Reinhard M&#252;ller">we defined the result of fetch being 
a 2-dimensional array, but you impelemented it as an array of 
dictionaries. I guess we must at least switch to the 2-dimensional 
array for xmlrpc conformance. I'm not sure if a struct helps 
us.</quote> Jan found out <quote who="Jan Ischebeck">that difference 
between API documentation: (2dim array) and implementation (2dim 
dictionary)</quote>. He was thinking what would be easier to implement. 
Reinhard offered looking for what would be easier to transport, because 
implementation would be no big difference.</p>

</section>


